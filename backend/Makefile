# Makefile para automa√ß√£o de testes do backend
# Uso: make <comando>

.PHONY: help test test-unit test-integration test-coverage test-html test-fast clean install lint format check

# Configura√ß√µes
PYTHON := python
PIP := pip
PYTEST := pytest
TEST_DIR := app/tests
COV_DIR := htmlcov

# Comando padr√£o
help:
	@echo "Comandos dispon√≠veis:"
	@echo "  test           - Executa todos os testes com cobertura"
	@echo "  test-unit      - Executa apenas testes unit√°rios"
	@echo "  test-integration - Executa apenas testes de integra√ß√£o"
	@echo "  test-coverage  - Executa testes e gera relat√≥rio de cobertura"
	@echo "  test-html      - Executa testes e gera relat√≥rio HTML"
	@echo "  test-fast      - Execu√ß√£o r√°pida sem relat√≥rios detalhados"
	@echo "  clean          - Remove arquivos tempor√°rios e cache"
	@echo "  install        - Instala depend√™ncias"
	@echo "  lint           - Executa linting do c√≥digo"
	@echo "  format         - Formata o c√≥digo"
	@echo "  check          - Executa verifica√ß√µes completas"

# Testes
test:
	@echo "üß™ Executando todos os testes com cobertura..."
	$(PYTEST) $(TEST_DIR) --cov=app --cov-report=term-missing -v

test-unit:
	@echo "üî¨ Executando testes unit√°rios..."
	$(PYTEST) $(TEST_DIR)/unit --cov=app --cov-report=term-missing -v

test-integration:
	@echo "üîó Executando testes de integra√ß√£o..."
	$(PYTEST) $(TEST_DIR)/integration --cov=app --cov-report=term-missing -v

test-coverage:
	@echo "üìä Executando testes com relat√≥rio de cobertura..."
	$(PYTEST) $(TEST_DIR) --cov=app --cov-report=term-missing --cov-report=html
	@echo "Relat√≥rio HTML dispon√≠vel em: $(COV_DIR)/index.html"

test-html:
	@echo "üåê Executando testes e gerando relat√≥rio HTML..."
	$(PYTEST) $(TEST_DIR) --cov=app --cov-report=html --cov-report=term-missing -v
	@echo "üìä Relat√≥rio HTML dispon√≠vel em: $(COV_DIR)/index.html"

test-fast:
	@echo "‚ö° Execu√ß√£o r√°pida de testes..."
	$(PYTEST) $(TEST_DIR) -q

# Verifica√ß√£o de cobertura m√≠nima
test-min-coverage:
	@echo "üéØ Verificando cobertura m√≠nima de 85%..."
	$(PYTEST) $(TEST_DIR) --cov=app --cov-fail-under=85 --cov-report=term-missing

# Limpeza
clean:
	@echo "üßπ Limpando arquivos tempor√°rios..."
	rm -rf __pycache__/
	rm -rf .pytest_cache/
	rm -rf $(COV_DIR)/
	rm -rf .coverage
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete

# Instala√ß√£o
install:
	@echo "üì¶ Instalando depend√™ncias..."
	$(PIP) install -r requirements.txt

install-dev:
	@echo "üõ†Ô∏è Instalando depend√™ncias de desenvolvimento..."
	$(PIP) install -r requirements.txt
	$(PIP) install black flake8 mypy

# Linting e formata√ß√£o
lint:
	@echo "üîç Executando linting..."
	@if command -v flake8 >/dev/null 2>&1; then \
		flake8 app/ --max-line-length=88 --extend-ignore=E203,W503; \
	else \
		echo "‚ö†Ô∏è flake8 n√£o instalado. Execute: pip install flake8"; \
	fi

format:
	@echo "‚ú® Formatando c√≥digo..."
	@if command -v black >/dev/null 2>&1; then \
		black app/ --line-length=88; \
	else \
		echo "‚ö†Ô∏è black n√£o instalado. Execute: pip install black"; \
	fi

type-check:
	@echo "üîé Verificando tipos..."
	@if command -v mypy >/dev/null 2>&1; then \
		mypy app/ --ignore-missing-imports; \
	else \
		echo "‚ö†Ô∏è mypy n√£o instalado. Execute: pip install mypy"; \
	fi

# Verifica√ß√µes completas
check: lint type-check test-min-coverage
	@echo "‚úÖ Todas as verifica√ß√µes conclu√≠das!"

# Comandos de desenvolvimento
dev-setup: install-dev
	@echo "üöÄ Ambiente de desenvolvimento configurado!"

ci: clean install test-min-coverage
	@echo "ü§ñ Pipeline de CI executado com sucesso!"

# Relat√≥rios
report:
	@echo "üìà Gerando relat√≥rio completo..."
	$(PYTEST) $(TEST_DIR) --cov=app --cov-report=html --cov-report=term --cov-report=xml
	@echo "Relat√≥rios dispon√≠veis:"
	@echo "  - HTML: $(COV_DIR)/index.html"
	@echo "  - XML: coverage.xml"

# Comandos de monitoramento
watch:
	@echo "üëÄ Monitorando mudan√ßas e executando testes..."
	@if command -v pytest-watch >/dev/null 2>&1; then \
		ptw $(TEST_DIR) -- --cov=app --cov-report=term-missing; \
	else \
		echo "‚ö†Ô∏è pytest-watch n√£o instalado. Execute: pip install pytest-watch"; \
	fi