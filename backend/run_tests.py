#!/usr/bin/env python3
"""
Script para execu√ß√£o de testes automatizados do backend.

Este script facilita a execu√ß√£o de diferentes tipos de testes e gera√ß√£o de relat√≥rios.

Uso:
    python run_tests.py [op√ß√µes]

Op√ß√µes:
    --unit          Executa apenas testes unit√°rios
    --integration   Executa apenas testes de integra√ß√£o
    --coverage      Gera relat√≥rio de cobertura (padr√£o: ativado)
    --no-coverage   Desabilita relat√≥rio de cobertura
    --html          Gera relat√≥rio HTML de cobertura
    --verbose       Execu√ß√£o verbosa
    --fast          Execu√ß√£o r√°pida (sem relat√≥rios detalhados)
    --help          Mostra esta ajuda

Exemplos:
    python run_tests.py                    # Todos os testes com cobertura
    python run_tests.py --unit             # Apenas testes unit√°rios
    python run_tests.py --integration      # Apenas testes de integra√ß√£o
    python run_tests.py --html             # Com relat√≥rio HTML
    python run_tests.py --fast             # Execu√ß√£o r√°pida
"""

import sys
import subprocess
import argparse
from pathlib import Path


def run_command(cmd, description=""):
    """Executa um comando e retorna o c√≥digo de sa√≠da."""
    if description:
        print(f"\nüîÑ {description}")
    
    print(f"Executando: {' '.join(cmd)}")
    result = subprocess.run(cmd, capture_output=False)
    
    if result.returncode == 0:
        print(f"‚úÖ {description or 'Comando'} executado com sucesso")
    else:
        print(f"‚ùå {description or 'Comando'} falhou com c√≥digo {result.returncode}")
    
    return result.returncode


def main():
    parser = argparse.ArgumentParser(
        description="Script para execu√ß√£o de testes automatizados",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument('--unit', action='store_true', 
                       help='Executa apenas testes unit√°rios')
    parser.add_argument('--integration', action='store_true', 
                       help='Executa apenas testes de integra√ß√£o')
    parser.add_argument('--coverage', action='store_true', default=True,
                       help='Gera relat√≥rio de cobertura (padr√£o)')
    parser.add_argument('--no-coverage', action='store_true',
                       help='Desabilita relat√≥rio de cobertura')
    parser.add_argument('--html', action='store_true',
                       help='Gera relat√≥rio HTML de cobertura')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Execu√ß√£o verbosa')
    parser.add_argument('--fast', action='store_true',
                       help='Execu√ß√£o r√°pida (sem relat√≥rios detalhados)')
    
    args = parser.parse_args()
    
    # Configurar comando base
    cmd = ['pytest']
    
    # Definir diret√≥rio de testes
    if args.unit:
        cmd.append('app/tests/unit')
        test_type = "unit√°rios"
    elif args.integration:
        cmd.append('app/tests/integration')
        test_type = "de integra√ß√£o"
    else:
        cmd.append('app/tests')
        test_type = "todos"
    
    # Configurar cobertura
    if not args.no_coverage and not args.fast:
        cmd.extend(['--cov=app'])
        
        if args.html:
            cmd.extend(['--cov-report=html'])
        
        if not args.fast:
            cmd.extend(['--cov-report=term-missing'])
    
    # Configurar verbosidade
    if args.verbose:
        cmd.append('-v')
    elif args.fast:
        cmd.append('-q')
    
    # Executar testes
    print(f"\nüß™ Executando testes {test_type}...")
    print(f"Diret√≥rio: {Path.cwd()}")
    
    exit_code = run_command(cmd, f"Testes {test_type}")
    
    # Relat√≥rio final
    if exit_code == 0:
        print("\nüéâ Todos os testes passaram!")
        if args.html and not args.no_coverage:
            print("üìä Relat√≥rio HTML de cobertura dispon√≠vel em: htmlcov/index.html")
    else:
        print("\nüí• Alguns testes falharam. Verifique a sa√≠da acima.")
    
    return exit_code


if __name__ == '__main__':
    sys.exit(main())